const contract = 'system.iost';
/**
 * Base system contract for issuing and updating contracts and other basic system functions.
 */
module.exports = (iost) => {
    return {
        /**
         * The smart contract code includes code and smart contract information, such as language and interface definitions. The code parameter supports two formats: json format and protobuf serialization encoding format. For developers, deployment contracts generally do not need to call this interface directly. It is recommended to use iwallet or related language SDK implementation.
         * When deploying a smart contract, the system automatically calls the init() function of the smart contract. The developer can do some initialization work in the init function.
         * Return value contractID is the smart contract ID, which is globally unique and generated by the hash of the deployment contract transaction. The contractID starts with "Contract" and consists of uppercase and lowercase letters and numbers. Only one smart contract can be deployed in a transaction.
         * @param {string} source smart contract source code
         * @param {Object} abi abi json
         * @param {Transaction.Tx} tx 
         * @returns {Transaction.Tx}
         */
        setCode(source, abi, tx = iost.createTx()) {
            const code = { code: source, info: abi };
            iost.call(contract, 'setCode', [JSON.stringify(code)], tx);
            return tx
        },
        /**
         * Upgrade the smart contract, code is the smart contract code, the format is the same as the parameter in setCode.
         * When upgrading a smart contract, the system will automatically check the upgrade permission, that is, the can_update(data) function in the contract, and the parameter data is the second parameter in the updateCode, if and only if the can_update function exists and the call returns true. The contract upgrade will succeed, otherwise the upgrade will fail and it is determined that there is no upgrade permission.
         * @param {string} source smart contract source code
         * @param {Object} abi abi json
         * @param {string} contractName contract address
         * @param {string} data Upgrade function parameters
         * @param {Transaction.Tx} tx 
         * @returns {Transaction.Tx}
         */
        updateCode(source, abi, contractName, data, tx = iost.createTx()) {
            const code = { ID: contractName, code: source, info: abi };
            iost.call(contract, 'updateCode', [JSON.stringify(code), data], tx);
            return tx
        },
        /**
         * Cancel a delayed transaction, call this function before the execution of the delayed transaction to cancel the delayed transaction.
         * @param {string} txHash Transaction hash
         * @param {Transaction.Tx} tx 
         * @returns {Transaction.Tx}
         */
        cancelDelaytx(txHash, tx = iost.createTx()) {
            iost.call(contract, 'cancelDelaytx', [txHash], tx);
            return tx
        },
        /**
         * Check if the transaction has the permission of the account.
         * @param {string} account 
         * @param {string} permission 
         * @param {Transaction.Tx} tx 
         * @returns {Transaction.Tx}
         */
        requireAuth(account, permission, tx = iost.createTx()) {
            iost.call(contract, 'requireAuth', [account, permission], tx);
            return tx
        },
        /**
         * Generate a transaction receipt, the receipt is stored in the block, and can also be queried through the transaction hash.
         * @param {string} data 
         * @param {Transaction.Tx} tx 
         * @returns {Transaction.Tx}
         */
        receipt(data, tx = iost.createTx()) {
            iost.call(contract, 'receipt', [data], tx);
            return tx
        }
    }
}